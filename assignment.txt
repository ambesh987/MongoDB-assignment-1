1. creating database:
     use assignment
    switched to db assignment
2. creating collection users:
    db.createCollection("users")
    { "ok" : 1 }
3. insert single:
     db.getCollection("users").insert({"first_name":"ambesh","last_name":"mishra","email":"ambeshxd@gmail.com","gender":"M","ip_address":"192.168.10.1","age":"23"})
     WriteResult({ "nInserted" : 1 })

     db.getCollection("users").find({})
    { "_id" : ObjectId("625d6bbdc43f1685b15ce905"), "first_name" : "ambesh", "last_name" : "mishra", "email" : "ambeshxd@gmail.com", "gender" : "M", "ip_address" : "192.168.10.1", "age" : "23" }
4. insert many:
     db.getCollection("users").insert([{first_name:"Raj",last_name:"shaval",email:"xd@gmail.com",gender:"M",ip_address:"192.1.1",age:"15"},{first_name:"rohan",last_name:"rash",email:"rohan@yaahoo",gender:"M",ip_address:"192.56.1.1",age:"21"}])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})

5. Find all:
    command and output:
    db.getCollection("users").find({})
{ "_id" : ObjectId("625d6bbdc43f1685b15ce905"), "first_name" : "ambesh", "last_name" : "mishra", "email" : "ambeshxd@gmail.com", "gender" : "M", "ip_address" : "192.168.10.1", "age" : "23" }
{ "_id" : ObjectId("625d6e4ec43f1685b15ce906"), "first_name" : "Raj", "last_name" : "shaval", "email" : "xd@gmail.com", "gender" : "M", "ip_address" : "192.1.1", "age" : "15" }
{ "_id" : ObjectId("625d6e4ec43f1685b15ce907"), "first_name" : "rohan", "last_name" : "rash", "email" : "rohan@yaahoo", "gender" : "M", "ip_address" : "192.56.1.1", "age" : "21" }
{ "_id" : ObjectId("625d6ef1c43f1685b15ce908"), "first_name" : "radha", "last_name" : "java", "email" : "radha.com", "gender" : "F", "ip_address" : "192.168.11.1", "age" : "15" }

6. Find One:
    command and output:
    db.getCollection("users").find({"first_name":"rohan"})
{ "_id" : ObjectId("625d6e4ec43f1685b15ce907"), "first_name" : "rohan", "last_name" : "rash", "email" : "rohan@yaahoo", "gender" : "M", "ip_address" : "192.56.1.1", "age" : "21" }

7. Update:
    command and output:
    db.getCollection("users").update({first_name:"ambesh"},{first_name:"aditya"})
    WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

    complete database:
     db.getCollection("users").find({}).pretty()
{ "_id" : ObjectId("625d6bbdc43f1685b15ce905"), "first_name" : "aditya" }
{
        "_id" : ObjectId("625d6e4ec43f1685b15ce906"),
        "first_name" : "Raj",
        "last_name" : "shaval",
        "email" : "xd@gmail.com",
        "gender" : "M",
        "ip_address" : "192.1.1",
        "age" : "15"
}
{
        "_id" : ObjectId("625d6e4ec43f1685b15ce907"),
        "first_name" : "rohan",
        "last_name" : "rash",
        "email" : "rohan@yaahoo",
        "gender" : "M",
        "ip_address" : "192.56.1.1",
        "age" : "21"
}
{
        "_id" : ObjectId("625d6ef1c43f1685b15ce908"),
        "first_name" : "radha",
        "last_name" : "java",
        "email" : "radha.com",
        "gender" : "F",
        "ip_address" : "192.168.11.1",
        "age" : "15"
}
8. remove one:
         db.getCollection("users").remove({_id:ObjectId("625d6ef1c43f1685b15ce908")})
            WriteResult({ "nRemoved" : 1 })    
9. Drop Collections:

        use users
        switched to db users
        > db.dropDatabase() 
        { "ok" : 1 }

10. Drop Database:
        use assignment
        switched to db assignment
        > db.dropDatabase()
        { "ok" : 1 }
        > show dbs
        admin   0.000GB
        config  0.000GB
        local   0.000GB
    